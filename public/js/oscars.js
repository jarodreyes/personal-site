// Generated by CoffeeScript 1.6.3
(function() {
  var AnswerContent, Leaderboard, Player, Players, Scoreboard, _ref, _ref1, _ref2, _ref3, _ref4,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Leaderboard = (function(_super) {
    __extends(Leaderboard, _super);

    function Leaderboard() {
      this.getScores = __bind(this.getScores, this);
      _ref = Leaderboard.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Leaderboard.prototype.template = '#leaderboard';

    Leaderboard.prototype.regions = {
      scores: '.scores'
    };

    Leaderboard.prototype.initialize = function() {
      this.currentSlug = null;
      this.players = new Players;
      this.content = new AnswerContent;
      this.listenTo(this.players, 'sync', this.getScores);
      return this.answersurl = "https://spreadsheets.google.com/feeds/list/0AmkZRXO39XOSdDkzZ1JveHBnZWxzYkFqN3htSHRFbWc/od6/public/values?alt=json";
    };

    Leaderboard.prototype.onRender = function() {
      return this.players.fetch();
    };

    Leaderboard.prototype.loadAnswers = function(model) {
      var _this = this;
      return $.ajax({
        url: this.answersurl,
        dataType: "json",
        type: 'GET',
        success: function(res) {
          var correct, score;
          score = 0;
          correct = [];
          return _.each(res['feed']['entry'], function(cell, idx) {
            return _.each(model.attributes, function(val, key) {
              var answer, gkey;
              gkey = key.toLowerCase();
              answer = cell["gsx$" + gkey];
              if (answer) {
                if (val === answer['$t']) {
                  score += 3;
                  correct.push("<span> " + key + ": 1st Guess " + val + " </span>");
                }
                if (val === answer['$t']) {
                  score += 1;
                  correct.push("<span> " + key + ": 2nd Guess " + val + " </span>");
                }
              }
              model.set('score', score);
              return model.set('correct', correct);
            });
          });
        }
      });
    };

    Leaderboard.prototype.getScores = function(reload) {
      var _this = this;
      if (reload == null) {
        reload = true;
      }
      return _.each(this.players.models, function(model) {
        if (reload) {
          model.set('score', 0);
          model.set('correct', '');
        }
        _this.loadAnswers(model);
        return _.defer(function() {
          if (reload) {
            _this.showPlayers();
          }
          return _this.players.sort();
        });
      });
    };

    Leaderboard.prototype.showPlayers = function() {
      this.scoreBoard = new Scoreboard({
        collection: this.players
      });
      return this.scores.show(this.scoreBoard);
    };

    return Leaderboard;

  })(Backbone.Marionette.Layout);

  Player = (function(_super) {
    __extends(Player, _super);

    function Player() {
      _ref1 = Player.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Player.prototype.template = '#player';

    Player.prototype.className = 'player';

    Player.prototype.events = {
      'click': 'showCorrect'
    };

    Player.prototype.showCorrect = function() {
      return (this.$('.answers')).toggleClass('slide');
    };

    return Player;

  })(Backbone.Marionette.ItemView);

  Scoreboard = (function(_super) {
    __extends(Scoreboard, _super);

    function Scoreboard() {
      _ref2 = Scoreboard.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Scoreboard.prototype.itemView = Player;

    return Scoreboard;

  })(Backbone.Marionette.CollectionView);

  Players = (function(_super) {
    __extends(Players, _super);

    function Players() {
      _ref3 = Players.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Players.prototype.url = "js/oscars.json";

    Players.prototype.comparator = function(model) {
      return -model.get('score');
    };

    return Players;

  })(Backbone.Collection);

  AnswerContent = (function(_super) {
    __extends(AnswerContent, _super);

    function AnswerContent() {
      _ref4 = AnswerContent.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    AnswerContent.prototype.url = "https://spreadsheets.google.com/feeds/list/0AmkZRXO39XOSdDkzZ1JveHBnZWxzYkFqN3htSHRFbWc/od6/public/values?alt=json";

    return AnswerContent;

  })(Backbone.Model);

  $(document).ready(function() {
    var lb;
    lb = new Leaderboard({
      el: ".leaderboard"
    });
    return lb.render();
  });

}).call(this);
