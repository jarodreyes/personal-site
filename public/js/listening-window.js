// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['window', 'jquery.xml2json'], function(WindowView, xml2json) {
  var ListeningWindow, SongCollectionView, SongView;
  ListeningWindow = (function(_super) {

    __extends(ListeningWindow, _super);

    function ListeningWindow() {
      return ListeningWindow.__super__.constructor.apply(this, arguments);
    }

    ListeningWindow.prototype.className = 'listening-window';

    ListeningWindow.prototype.template = _.template($('#listening-template').html());

    ListeningWindow.prototype.el = '.listening';

    ListeningWindow.prototype.url = 'http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=jardy7&api_key=b43247deffdcc1127871216484cc1687&format=json&limit=20';

    ListeningWindow.prototype.additionalEvents = {
      'click a.next': 'slideNext',
      'click a.prev': 'slidePrev'
    };

    ListeningWindow.prototype.regions = {
      'songs': '.song-list'
    };

    ListeningWindow.prototype.ui = {
      'window': '.window'
    };

    ListeningWindow.prototype.initialize = function() {
      this.uniqueTracks = [];
      this.getData();
      this.scrollable = true;
      this.pages = 19;
      return ListeningWindow.__super__.initialize.apply(this, arguments);
    };

    ListeningWindow.prototype.toggleWindow = function(event) {
      this.songs.show(this.songCollectionView);
      this.ui.window.append(_.template($('#scroll-controls').html()));
      (this.$('small')).toggleClass('invisible');
      return ListeningWindow.__super__.toggleWindow.apply(this, arguments);
    };

    ListeningWindow.prototype.getData = function() {
      var _this = this;
      return $.ajax({
        url: this.url,
        success: function(data) {
          _this.data = data.recenttracks.track;
          return _this.prepareData();
        }
      });
    };

    ListeningWindow.prototype.prepareData = function() {
      var track, _i, _len, _ref;
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        track.image_url = track.image[3]['#text'];
        track.artist_name = track.artist['#text'];
      }
      this.trackList = new Backbone.Collection(this.data);
      return this.renderTracks();
    };

    ListeningWindow.prototype.renderTracks = function() {
      return this.songCollectionView = new SongCollectionView({
        collection: this.trackList,
        className: 'inner-scroll'
      });
    };

    return ListeningWindow;

  })(WindowView);
  SongView = (function(_super) {

    __extends(SongView, _super);

    function SongView() {
      return SongView.__super__.constructor.apply(this, arguments);
    }

    SongView.prototype.template = _.template($('#song-template').html());

    return SongView;

  })(Backbone.Marionette.ItemView);
  SongCollectionView = (function(_super) {

    __extends(SongCollectionView, _super);

    function SongCollectionView() {
      return SongCollectionView.__super__.constructor.apply(this, arguments);
    }

    SongCollectionView.prototype.itemView = SongView;

    SongCollectionView.prototype.itemViewOptions = {
      className: 'song-preview card',
      tagName: 'li'
    };

    return SongCollectionView;

  })(Backbone.Marionette.CollectionView);
  return ListeningWindow;
});
