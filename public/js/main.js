// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['reading-window', 'hacking-window', 'github-window', 'listening-window', 'voxy-window'], function(ReadingWindow, HackingWindow, GithubWindow, ListeningWindow, VoxyWindow) {
  var HEADER_PADDING, MainApp, MainPage, MainRouter, TweetCollection, TweetManager, TweetView, app;
  HEADER_PADDING = 45;
  MainApp = (function(_super) {

    __extends(MainApp, _super);

    function MainApp() {
      return MainApp.__super__.constructor.apply(this, arguments);
    }

    return MainApp;

  })(Backbone.Marionette.Application);
  app = new MainApp;
  app.addInitializer(function() {
    var router;
    router = new MainRouter;
    return Backbone.history.start({
      root: '/',
      pushState: true
    });
  });
  MainRouter = (function(_super) {

    __extends(MainRouter, _super);

    function MainRouter() {
      return MainRouter.__super__.constructor.apply(this, arguments);
    }

    MainRouter.prototype.routes = {
      'bio/': 'showBio',
      'hacker/': 'showHacker',
      'developer/': 'showDeveloper'
    };

    MainRouter.prototype.initialize = function() {
      this.mainPage = new MainPage;
      this.reading = new ReadingWindow;
      this.hacking = new HackingWindow;
      this.git = new GithubWindow;
      this.listening = new ListeningWindow;
      this.voxy = new VoxyWindow;
      return this.mainPage.setupHeight();
    };

    MainRouter.prototype.showBio = function() {
      return this.mainPage.scrollToBio();
    };

    MainRouter.prototype.showHacker = function() {
      return this.mainPage.scrollToHacker();
    };

    MainRouter.prototype.showDeveloper = function() {
      return this.mainPage.scrollToDeveloper();
    };

    return MainRouter;

  })(Backbone.Router);
  MainPage = (function(_super) {

    __extends(MainPage, _super);

    function MainPage() {
      this.clockIncrement = __bind(this.clockIncrement, this);
      return MainPage.__super__.constructor.apply(this, arguments);
    }

    MainPage.prototype.el = 'body';

    MainPage.prototype.events = {
      'click .nav-link': 'navigateTo'
    };

    MainPage.prototype.regions = {
      'tweets': '.tweets'
    };

    MainPage.prototype.initialize = function() {
      _.bindAll(this, 'detectScroll');
      this.detectScroll();
      this.idleTime = 0;
      this.inactive = true;
      return this.detectIdleness();
    };

    MainPage.prototype.detectIdleness = function() {
      var idleInterval,
        _this = this;
      idleInterval = setInterval(this.clockIncrement, 10000);
      this.$el.mousemove(function() {
        return _this.idleTime = 0;
      });
      return this.$el.keypress(function() {
        return _this.idleTime = 0;
      });
    };

    MainPage.prototype.clockIncrement = function() {
      this.idleTime++;
      if (this.idleTime > 3) {
        return (this.$('.reading > .window')).toggleClass('bounce');
      }
    };

    MainPage.prototype.setupHeight = function() {
      this.headerH = $('.header-main').outerHeight();
      this.hackerHeader = $('.header-hacker');
      this.developerHeader = $('.header-developer');
      this.hackerDisplay = $('.hacker-display');
      this.developerDisplay = $('.developer-display');
      this.hackerTop = this.hackerHeader.offset().top - (this.headerH - HEADER_PADDING);
      return this.developerTop = this.developerHeader.offset().top - (this.headerH + this.hackerHeader.outerHeight());
    };

    MainPage.prototype.detectScroll = function(event) {
      var _this = this;
      return $(window).scroll(function(event) {
        var hackerMovement, top;
        top = $(window).scrollTop();
        hackerMovement = $('.header-hacker').offset().top;
        if (top >= _this.hackerTop && top < _this.developerTop) {
          _this.afixHacker(true);
          _this.afixBio(false);
        }
        if (top >= _this.developerTop) {
          _this.afixDeveloper(true);
        }
        if (top < _this.developerTop) {
          _this.afixDeveloper(false);
        }
        if (top < _this.hackerTop) {
          _this.afixHacker(false);
          return _this.afixBio(true);
        }
      });
    };

    MainPage.prototype.afixHacker = function(afix) {
      if (afix == null) {
        afix = null;
      }
      if (afix) {
        $('#hacker > .header-offset').removeClass('absolute');
        this.hackerDisplay.addClass('show');
        this.hackerHeader.addClass('fixed');
        Backbone.history.navigate('hacker/');
        return this.toggleActive(void 0, 'hacker');
      } else {
        this.hackerDisplay.removeClass('show');
        this.hackerHeader.removeClass('fixed');
        return this.afixBio(true);
      }
    };

    MainPage.prototype.afixDeveloper = function(afix) {
      if (afix == null) {
        afix = null;
      }
      if (afix) {
        $('#developer > .header-offset').removeClass('absolute');
        this.developerDisplay.addClass('show');
        this.developerHeader.addClass('fixed');
        Backbone.history.navigate('developer/');
        return this.toggleActive(void 0, 'developer');
      } else {
        this.developerDisplay.removeClass('show');
        return this.developerHeader.removeClass('fixed');
      }
    };

    MainPage.prototype.afixBio = function(afix) {
      if (afix == null) {
        afix = null;
      }
      if (afix) {
        $('.header-offset').addClass('absolute');
        $('.logo-bg.main').show();
        $('.nav').removeClass('fixed orange');
        $('.logo').removeClass('fixed');
        Backbone.history.navigate('/');
        return this.toggleActive(void 0, 'bio');
      } else {
        $('.nav').addClass('fixed orange');
        $('.logo').addClass('fixed');
        return $('.logo-bg.main').hide();
      }
    };

    MainPage.prototype.unfixHeaders = function() {
      $('.header-offset').addClass('absolute');
      this.hackerHeader.removeClass('fixed');
      this.developerHeader.removeClass('fixed');
      $('.logo-bg.main').show();
      $('.nav').removeClass('fixed orange');
      $('.logo').removeClass('fixed');
      Backbone.history.navigate('/');
      return this.toggleActive(void 0, 'bio');
    };

    MainPage.prototype.scrollToHacker = function(event) {
      var _this = this;
      this.prepareScroll();
      return _.defer(function() {
        return $('html, body').animate({
          scrollTop: _this.hackerTop
        }, 700);
      });
    };

    MainPage.prototype.scrollToDeveloper = function(event) {
      var _this = this;
      this.prepareScroll();
      return _.defer(function() {
        return $('html, body').animate({
          scrollTop: _this.developerTop
        }, 700);
      });
    };

    MainPage.prototype.scrollToBio = function(event) {
      var _this = this;
      this.prepareScroll();
      return _.defer(function() {
        return $('html, body').animate({
          scrollTop: $("#bio").offset().top
        }, 700);
      });
    };

    MainPage.prototype.prepareScroll = function() {
      return $('.window').removeClass('open');
    };

    MainPage.prototype.navigateTo = function(event) {
      var data, route;
      data = $(event.currentTarget).data();
      event.preventDefault();
      route = data.route;
      Backbone.history.navigate(route, {
        trigger: true
      });
      return this.toggleActive(event, void 0);
    };

    MainPage.prototype.toggleActive = function(event, element) {
      $('.nav-link').removeClass('active');
      if (event) {
        $(event.target).addClass('active');
      }
      if (element) {
        return $(".nav-link[data-route*=" + element + "]").addClass('active');
      }
    };

    return MainPage;

  })(Backbone.Marionette.Layout);
  TweetView = (function(_super) {

    __extends(TweetView, _super);

    function TweetView() {
      return TweetView.__super__.constructor.apply(this, arguments);
    }

    TweetView.prototype.template = _.template($('#tweet-template').html());

    return TweetView;

  })(Backbone.Marionette.ItemView);
  TweetCollection = (function(_super) {

    __extends(TweetCollection, _super);

    function TweetCollection() {
      return TweetCollection.__super__.constructor.apply(this, arguments);
    }

    TweetCollection.prototype.itemView = TweetView;

    TweetCollection.prototype.itemViewOptions = {
      className: 'tweet block'
    };

    return TweetCollection;

  })(Backbone.Marionette.CollectionView);
  TweetManager = (function(_super) {

    __extends(TweetManager, _super);

    function TweetManager() {
      return TweetManager.__super__.constructor.apply(this, arguments);
    }

    TweetManager.prototype.template = _.template($('#tweets-layout').html());

    return TweetManager;

  })(Backbone.Marionette.Layout);
  return app.start();
});
