// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery.xml2json'], function(xml2json) {
  var MovieListView, MovieView, NetflixList, app;
  NetflixList = (function(_super) {

    __extends(NetflixList, _super);

    function NetflixList() {
      return NetflixList.__super__.constructor.apply(this, arguments);
    }

    NetflixList.prototype.el = '.netflix-content';

    NetflixList.prototype.events = {
      'click a.sort': 'handleClick'
    };

    NetflixList.prototype.regions = {
      'movieList': '.movie-list'
    };

    NetflixList.prototype.initialize = function() {
      this.sorter = 'ranking';
      return this.getMovieList();
    };

    NetflixList.prototype.handleClick = function(event) {
      this.sorter = $(event.currentTarget).data('value');
      this.showMovies();
      return false;
    };

    NetflixList.prototype.getMovieList = function() {
      var _this = this;
      return $.ajax({
        url: 'http://dvd.netflix.com/Top100RSS',
        dataType: "xml",
        type: 'GET',
        success: function(res) {
          var data, xml;
          xml = res.responseText;
          data = $.xml2json(xml);
          _this.model = new Backbone.Model(data);
          return _.defer(function() {
            return _this.buildCollection();
          });
        }
      });
    };

    NetflixList.prototype.buildCollection = function() {
      var description, image_url, item, _i, _len, _ref;
      this.movies = this.model.get('channel')['item'];
      _ref = this.movies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        description = item.description;
        item.review = this.getMovieReview(JSON.stringify(item.title));
        image_url = description.match(/src="(.+?[\.jpg])"/)[1];
        item.image_url = image_url.replace('small', 'ghd');
      }
      this.alphaMovies = _.sortBy(this.movies, function(item) {
        return item.title;
      });
      return this.showMovies();
    };

    NetflixList.prototype.getMovieReview = function(title) {
      var _this = this;
      return $.ajax({
        url: 'http://api.rottentomatoes.com/api/public/v1.0/movies.json',
        data: {
          apikey: '5guu6wsykg55qawcjsp2y8tk',
          q: title,
          page_limit: 1
        },
        success: function(res) {
          console.log(res.movies[0]);
          return res.movies[0].ratings.audience_score;
        }
      });
    };

    NetflixList.prototype.showMovies = function() {
      (this.$('a.sort')).removeClass('active');
      (this.$("a.sort[data-value=" + this.sorter + "]")).addClass('active');
      if (this.sorter === 'title') {
        this.collection = new Backbone.Collection(this.alphaMovies);
      } else {
        this.collection = new Backbone.Collection(this.movies);
      }
      return this.movieList.show(new MovieListView({
        collection: this.collection
      }));
    };

    return NetflixList;

  })(Backbone.Marionette.Layout);
  MovieView = (function(_super) {

    __extends(MovieView, _super);

    function MovieView() {
      return MovieView.__super__.constructor.apply(this, arguments);
    }

    MovieView.prototype.template = _.template($('#movie-template').html());

    return MovieView;

  })(Backbone.Marionette.ItemView);
  MovieListView = (function(_super) {

    __extends(MovieListView, _super);

    function MovieListView() {
      return MovieListView.__super__.constructor.apply(this, arguments);
    }

    MovieListView.prototype.itemView = MovieView;

    MovieListView.prototype.itemViewOptions = {
      className: 'movie'
    };

    return MovieListView;

  })(Backbone.Marionette.CollectionView);
  return app = new NetflixList();
});
